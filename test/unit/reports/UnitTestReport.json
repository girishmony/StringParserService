{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-14T15:59:31.651Z",
    "end": "2020-10-14T15:59:31.669Z",
    "duration": 18,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c92c4d9b-c5a3-4259-baad-b9ded75969af",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90e5da02-5f8b-4f4c-af9e-61c91b8f0ab5",
          "title": "Validate v1 String Parser Service",
          "fullFile": "d:\\Girish\\Github\\StringParserService\\test\\unit\\StringParserTest.js",
          "file": "\\test\\unit\\StringParserTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return expected response",
              "fullTitle": "Validate v1 String Parser Service should return expected response",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var { statusCode, data } = await stringParserService.v1Parser(\"JOHN0000MICHAEL0009994567\");\nassert.equal(statusCode, 200, 'Status code incorrect');\nassert.equal(data.firstName, 'JOHN0000', 'First Name incorrect');\nassert.equal(data.lastName, 'MICHAEL000', 'Last Name incorrect');\nassert.equal(data.clientId, '9994567', 'Client id incorrect');",
              "err": {},
              "uuid": "3ac37030-a9d4-4619-8d75-a5cf7679b460",
              "parentUUID": "90e5da02-5f8b-4f4c-af9e-61c91b8f0ab5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ac37030-a9d4-4619-8d75-a5cf7679b460"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b009cbd-c001-4dce-9e15-2eaf36741571",
          "title": "Validate v2 String Parser Service",
          "fullFile": "d:\\Girish\\Github\\StringParserService\\test\\unit\\StringParserTest.js",
          "file": "\\test\\unit\\StringParserTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return expected response",
              "fullTitle": "Validate v2 String Parser Service should return expected response",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var { statusCode, data } = await stringParserService.v2Parser(\"JOHN0000MICHAEL0009994567\");\nassert.equal(statusCode, 200, 'Status code incorrect');\nassert.equal(data.firstName, 'JOHN', 'First Name incorrect');\nassert.equal(data.lastName, 'MICHAEL', 'Last Name incorrect');\nassert.equal(data.clientId, '999-4567', 'Client id incorrect');",
              "err": {},
              "uuid": "7f40c005-1002-4ff0-843e-202b2fac5b61",
              "parentUUID": "3b009cbd-c001-4dce-9e15-2eaf36741571",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f40c005-1002-4ff0-843e-202b2fac5b61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "UnitTestReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "test/unit/reports/",
        "reportFilename": "UnitTestReport"
      },
      "version": "5.1.0"
    }
  }
}